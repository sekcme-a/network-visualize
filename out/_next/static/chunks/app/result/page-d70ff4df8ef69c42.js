(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[609],{39743:function(e,t,n){Promise.resolve().then(n.bind(n,33052))},33052:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var o=n(57437),a=n(2265);n(57818);var d=n(220),c=n(48888),r=n(16463);n(87138);var i=()=>{(0,r.useRouter)();let[e,t]=(0,a.useState)([]),[n,i]=(0,a.useState)([]),[s,l]=(0,a.useState)([]),{nodes:u,setNodes:_,edges:p,setEdges:g}=(0,a.useContext)(c.I),h=(e,t)=>{let n=e.target.files[0],o=new FileReader;o.onload=e=>{let n=e.target.result,o=(0,d.X)(n);"interactions"===t?i(o):l(o)},o.readAsText(n)},m=e=>{let t={};return e.forEach(e=>{let{source:n,target:o}=e.data;t[n]=(t[n]||0)+1,t[o]=(t[o]||0)+1}),t};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)("div",{style:{display:"flex",marginTop:"20px"},children:[(0,o.jsx)("h3",{style:{marginRight:"20px"},children:"Input Interactions"}),(0,o.jsx)("input",{type:"file",onChange:e=>h(e,"interactions"),accept:".tsv"})]}),(0,o.jsxs)("div",{style:{display:"flex",marginTop:"20px"},children:[(0,o.jsxs)("h3",{style:{marginRight:"20px"},children:["Protein Annotations",(0,o.jsx)("p",{style:{fontSize:"13px"},children:"(Not required)"})]}),(0,o.jsx)("input",{type:"file",onChange:e=>h(e,"annotations"),accept:".tsv"})]}),(0,o.jsx)("div",{style:{marginTop:"20px"},children:(0,o.jsx)("button",{onClick:()=>{let e=[...new Map(n.map(e=>({data:{id:e["#node1"],label:e["#node1"]}})).map(e=>[e.data.id,e])).values()].map(e=>{let t=s.find(t=>t["#node"]===e.data.id);return t?{data:{...e.data,...t}}:e}),t=new Set,o=n.flatMap(e=>{let n="".concat(e["#node1"],"_").concat(e.node2),o="".concat(e.node2,"_").concat(e["#node1"]);return t.has(n)||t.has(o)?[]:(t.add(n),t.add(o),[{data:{id:"".concat(e["#node1"],"_").concat(e.node2,"_combined"),source:e["#node1"],target:e.node2,score:e.combined_score,type:"combined_score"}},{data:{id:"".concat(e["#node1"],"_").concat(e.node2,"_neighborhood"),source:e["#node1"],target:e.node2,score:e.neighborhood_on_chromosome,type:"neighborhood_on_chromosome"}},{data:{id:"".concat(e["#node1"],"_").concat(e.node2,"_gene_fusion"),source:e["#node1"],target:e.node2,score:e.gene_fusion,type:"gene_fusion"}},{data:{id:"".concat(e["#node1"],"_").concat(e.node2,"_phylogenetic_cooccurrence"),source:e["#node1"],target:e.node2,score:e.phylogenetic_cooccurrence,type:"phylogenetic_cooccurrence"}},{data:{id:"".concat(e["#node1"],"_").concat(e.node2,"_homology"),source:e["#node1"],target:e.node2,score:e.homology,type:"homology"}},{data:{id:"".concat(e["#node1"],"_").concat(e.node2,"_coexpression"),source:e["#node1"],target:e.node2,score:e.coexpression,type:"coexpression"}},{data:{id:"".concat(e["#node1"],"_").concat(e.node2,"_experimentally_determined_interaction"),source:e["#node1"],target:e.node2,score:e.experimentally_determined_interaction,type:"experimentally_determined_interaction"}},{data:{id:"".concat(e["#node1"],"_").concat(e.node2,"_database_annotated"),source:e["#node1"],target:e.node2,score:e.database_annotated,type:"database_annotated"}},{data:{id:"".concat(e["#node1"],"_").concat(e.node2,"_automated_textmining"),source:e["#node1"],target:e.node2,score:e.automated_textmining,type:"automated_textmining"}}].filter(e=>0!==e.data.score&&"0"!==e.data.score))});g(o);let a=m(o),d=e.map(e=>({...e,data:{...e.data,size:a[e.data.id]?a[e.data.id]/1.5+25:25}}));_(d),console.log(o),console.log(d)},children:"Visualize"})})]})},s=n(19462),l=()=>{let{edges:e,nodes:t}=(0,a.useContext)(c.I);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("h1",{children:"Biological Network Visualization"}),(0,o.jsx)(i,{}),(null==e?void 0:e.length)>0&&(null==t?void 0:t.length)>0&&(0,o.jsx)(s.Z,{edges:e,nodes:t})]})}}},function(e){e.O(0,[421,264,839,308,971,23,744],function(){return e(e.s=39743)}),_N_E=e.O()}]);